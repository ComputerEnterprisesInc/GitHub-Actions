#
#  Author: Hari Sekhon
#  Date: 2022-01-27 18:38:27 +0000 (Thu, 27 Jan 2022)
#
#  vim:ts=2:sts=2:sw=2:et
#
#  https://github.com/HariSekhon/GitHub-Actions
#
#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback
#
#  https://www.linkedin.com/in/harisekhon
#

# ============================================================================ #
#                D o c k e r   B u i l d   ->   D o c k e r H u b
# ============================================================================ #

# Docker Build, Tag & Push to DockerHub

---
name: Docker Build -> DockerHub

on:
  workflow_call:
    inputs:
      repo:
        description: The DockerHub repository in <user>/<repo> format
        type: string
        required: true
      tags:
        description: Tags to assign, one per line
        type: string
        default: latest
      context:
        type: string
        default: .
      file:
        type: string
        default: Dockerfile
      max-cache:
        type: boolean
        default: false
      build-cache:
        description: The build cache tag to use
        type: string
        default: buildcache
    secrets:
      DOCKERHUB_USER:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  docker_build:
    name: Docker Build -> DockerHub
    timeout-minutes: 60
    runs-on: ubuntu-latest
    # better done in the calling workflow to prevent manual docker builds on the wrong branches
    #if: github.ref_name == 'master' || github.ref_name == 'main' || contains(github.ref_name, 'docker')
    permissions:
      contents: read
      packages: write
    env:
      REPO: ${{ inputs.repo }}
      TAGS: ${{ inputs.tags }}
      BUILDCACHE: ${{ inputs.build-cache }}
    steps:
      - uses: actions/checkout@v2

      - name: Environment
        run: env | sort

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate environment variable DOCKER_IMAGE_CACHE
        if: ${{ inputs.max-cache }}
        #run: echo "DOCKER_IMAGE_CACHE=ghcr.io/${{ github.repository }}" >> "$GITHUB_ENV"
        run: echo "DOCKER_IMAGE_CACHE=${{ env.REPO }}" >> "$GITHUB_ENV"

      - name: Generate REPO_TAGS environment variable
        run: |
          echo "REPO_TAGS=$(
            for tag in ${{ env.TAGS }}; do
              if ! [[ "$tag" =~ : ]]; then
                echo "${{env.REPO}}:$tag"
              fi
            done
          )" >> "$GITHUB_ENV"

      - name: Generate CACHE_FROM environment variable
        run: |
          echo "CACHE_FROM=$(
            for repo_tag in ${{ env.REPO_TAGS }}; do
              echo type=registry,ref=$repo_tag
            done
          )" >> "$GITHUB_ENV"

      - name: Login to GHCR
        if: ${{ inputs.max-cache }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # XXX: Normal build, use inline cache when max-cache input is not set to 'true' - fine for most purposes except for multi-stage builds
      - name: Docker Build & Push
        if: ${{ ! inputs.max-cache }}
        uses: docker/build-push-action@v2
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.file }}
          tags: ${{ env.REPO_TAGS }}
          push: true
          cache-from: ${{ env.CACHE_FROM }}
          cache-to: type=inline

      # XXX: Max Cache build with separate GHCR buildcache since ECR doesn't support it - for multi-stage builds
      #
      # call like so:
      #
      #   jobs:
      #     docker_build:
      #       uses: HariSekhon/GitHub-Actions/.github/workflows/docker_build.yaml@master
      #       with:
      #         max-cache: true
      #         ...
      #
      - name: Docker Build & Push with external GHCR registry max cache
        if: ${{ inputs.max-cache }}
        uses: docker/build-push-action@v2
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.file }}
          tags: ${{ env.REPO_TAGS }}
          push: true
          cache-from: |
            type=registry,ref=${{env.DOCKER_IMAGE_CACHE}}:buildcache
            ${{ env.CACHE_FROM }}
          cache-to: type=registry,ref=${{env.DOCKER_IMAGE_CACHE}}:${{env.BUILDCACHE}},mode=max
